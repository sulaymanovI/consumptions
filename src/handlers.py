from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton
import asyncio
import os
from datetime import datetime, timedelta

from database import db
from keyboards import get_categories_keyboard, get_cancel_keyboard
from config import CATEGORIES, ALLOWED_USERS, USER_NAMES
from models import Category
from utils import format_amount
from excel_utils import create_expenses_excel, cleanup_excel_file

router = Router()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ
class ExpenseStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_comment = State()
    waiting_for_date = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
            [KeyboardButton(text="üìä –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é")],
            [KeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")],
            [KeyboardButton(text="üíæ –í—Å–µ –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã")],
            [KeyboardButton(text="üèÜ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")],
            [KeyboardButton(text="üìÖ –†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–µ")],
            [KeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")]
        ],
        resize_keyboard=True
    )

def check_user_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_id in ALLOWED_USERS

async def send_access_denied(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞"""
    await message.answer(
        "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. "
        "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ—à–∏–±–∫–µ, "
        "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
@router.message(Command("myid"))
async def get_my_id(message: types.Message):
    await message.answer(f"–í–∞—à ID: {message.from_user.id}")

@router.message(Command("start", "help"))
async def start_command(message: types.Message):
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    db.add_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    user_name = USER_NAMES.get(message.from_user.id, message.from_user.first_name)
    await message.answer(
        f"üí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense_command(message: types.Message, state: FSMContext):
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    await state.set_state(ExpenseStates.waiting_for_amount)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(F.text == "üìÖ –†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–µ")
async def ask_for_date(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    await state.set_state(ExpenseStates.waiting_for_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã",
        reply_markup=get_cancel_keyboard()
    )

@router.message(ExpenseStates.waiting_for_date)
async def show_expenses_by_date(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    date_input = message.text.strip().lower()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if date_input == '—Å–µ–≥–æ–¥–Ω—è':
        target_date = datetime.now().strftime("%Y-%m-%d")
    elif date_input == '–≤—á–µ—Ä–∞':
        target_date = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        try:
            datetime.strptime(date_input, "%Y-%m-%d")
            target_date = date_input
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15\n"
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è'"
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    expenses = db.get_expenses_by_date(message.from_user.id, target_date)
    
    if not expenses:
        await message.answer(
            f"üìä –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {target_date}",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    total = sum(float(item['amount']) for item in expenses)
    response = f"üìÖ –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ {target_date}:\n\n"
    
    for i, item in enumerate(expenses, 1):
        category_name = CATEGORIES.get(item['category'], item['category'])
        formatted_amount = format_amount(item['amount'])
        time_str = item['created_at'].strftime("%H:%M") if isinstance(item['created_at'], datetime) else ""
        
        response += f"{i}. {category_name}: {formatted_amount} —Å—É–º\n"
        response += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n"
        if item['comment']:
            response += f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {item['comment']}\n"
        if time_str:
            response += f"   –í—Ä–µ–º—è: {time_str}\n"
        response += "\n"
    
    formatted_total = format_amount(total)
    response += f"üíµ –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {formatted_total} —Å—É–º"
    
    await message.answer(response, reply_markup=get_main_keyboard())
    await state.clear()

@router.message(F.text == "üìä –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é")
async def show_my_expenses_weekly(message: types.Message):
    """–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    expenses = db.get_user_expenses_by_category_weekly(message.from_user.id)
    
    if not expenses:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é üìä")
        return
    
    total = sum(item['total_amount'] for item in expenses)
    response = "üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
    
    for item in expenses:
        category_name = CATEGORIES.get(item['category'], item['category'])
        formatted_amount = format_amount(item['total_amount'])
        response += f"{category_name}: {formatted_amount} —Å—É–º ({item['expense_count']} —Ä–∞–∑)\n"
    
    formatted_total = format_amount(total)
    response += f"\nüíµ –ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {formatted_total} —Å—É–º"
    await message.answer(response)

@router.message(F.text == "üíæ –í—Å–µ –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã")
async def show_my_expenses_all_time(message: types.Message):
    """–í—Å–µ –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"""
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    expenses = db.get_user_expenses_by_category_all_time(message.from_user.id)
    
    if not expenses:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ üìä")
        return
    
    total = sum(item['total_amount'] for item in expenses)
    response = "üíæ –í—Å–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:\n\n"
    
    for item in expenses:
        category_name = CATEGORIES.get(item['category'], item['category'])
        formatted_amount = format_amount(item['total_amount'])
        response += f"{category_name}: {formatted_amount} —Å—É–º ({item['expense_count']} —Ä–∞–∑)\n"
    
    formatted_total = format_amount(total)
    response += f"\nüíµ –û–±—â–∏–π –∏—Ç–æ–≥: {formatted_total} —Å—É–º"
    await message.answer(response)

@router.message(F.text == "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")
async def show_general_statistics_weekly(message: types.Message):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    expenses = db.get_general_statistics_weekly()
    
    if not expenses:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é üìä")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users_data = {}
    for item in expenses:
        if item['first_name'] not in users_data:
            users_data[item['first_name']] = []
        users_data[item['first_name']].append(item)
    
    response = "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
    grand_total = 0
    
    for user_name, user_expenses in users_data.items():
        user_total = sum(item['total_amount'] for item in user_expenses)
        grand_total += user_total
        
        response += f"üë§ {user_name}:\n"
        
        for item in user_expenses:
            category_name = CATEGORIES.get(item['category'], item['category'])
            formatted_amount = format_amount(item['total_amount'])
            response += f"   {category_name}: {formatted_amount} —Å—É–º ({item['expense_count']} –ø–æ–∫—É–ø–æ–∫)\n"
        
        formatted_user_total = format_amount(user_total)
        response += f"   üíµ –ò—Ç–æ–≥–æ: {formatted_user_total} —Å—É–º\n\n"
    
    formatted_grand_total = format_amount(grand_total)
    response += f"üèÜ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: {formatted_grand_total} —Å—É–º"
    await message.answer(response)

@router.message(F.text == "üèÜ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
async def show_general_statistics_all_time(message: types.Message):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"""
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    expenses = db.get_general_statistics_all_time()
    
    if not expenses:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö üìä")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users_data = {}
    for item in expenses:
        if item['first_name'] not in users_data:
            users_data[item['first_name']] = []
        users_data[item['first_name']].append(item)
    
    response = "üèÜ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"
    grand_total = 0
    
    for user_name, user_expenses in users_data.items():
        user_total = sum(item['total_amount'] for item in user_expenses)
        grand_total += user_total
        
        response += f"üë§ {user_name}:\n"
        
        for item in user_expenses:
            category_name = CATEGORIES.get(item['category'], item['category'])
            formatted_amount = format_amount(item['total_amount'])
            response += f"   {category_name}: {formatted_amount} —Å—É–º ({item['expense_count']} –ø–æ–∫—É–ø–æ–∫)\n"
        
        formatted_user_total = format_amount(user_total)
        response += f"   üíµ –ò—Ç–æ–≥–æ: {formatted_user_total} —Å—É–º\n\n"
    
    formatted_grand_total = format_amount(grand_total)
    response += f"üèÜ –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {formatted_grand_total} —Å—É–º"
    await message.answer(response)

@router.message(F.text == "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def export_to_excel(message: types.Message):
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    excel_file_path = None
    
    try:
        await message.answer("üîÑ –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç...")
        expenses = db.get_all_expenses()
        
        if not expenses:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ üìä")
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        excel_file_path = create_expenses_excel(expenses)
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ–º BufferedInputFile
        with open(excel_file_path, 'rb') as file:
            file_data = file.read()
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        document = BufferedInputFile(
            file=file_data,
            filename="expenses_report.xlsx"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            document=document,
            caption=f"üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º\n\n"
                   f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(expenses)}\n"
                   f"–û–±—â–∞—è —Å—É–º–º–∞: {format_amount(sum(float(expense['amount']) for expense in expenses))} —Å—É–º"
        )
        
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
        print(f"Error creating Excel report: {e}")
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if excel_file_path:
            cleanup_excel_file(excel_file_path)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(ExpenseStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    try:
        amount = float(message.text.replace(',', '.').replace(' ', ''))
        if amount <= 0:
            raise ValueError
        
        await state.update_data(amount=amount)
        await state.set_state(ExpenseStates.waiting_for_description)
        await message.answer("–û–ø–∏—à–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–±–µ–¥ –≤ –∫–∞—Ñ–µ'):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")

@router.message(ExpenseStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    await state.update_data(description=message.text)
    await state.set_state(ExpenseStates.waiting_for_category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_keyboard())

@router.callback_query(ExpenseStates.waiting_for_category, F.data.startswith("category_"))
async def process_category(callback: types.CallbackQuery, state: FSMContext):
    if not check_user_access(callback.from_user.id):
        await callback.message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    category = callback.data.split('_')[1]
    await state.update_data(category=category)
    await state.set_state(ExpenseStates.waiting_for_comment)
    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? (–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç')",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

@router.message(ExpenseStates.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    if not check_user_access(message.from_user.id):
        await send_access_denied(message)
        return
    
    data = await state.get_data()
    comment = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    
    success = db.add_expense(
        message.from_user.id,
        data['amount'],
        Category(data['category']),
        data['description'],
        comment
    )
    
    if success:
        category_name = CATEGORIES[data['category']]
        formatted_amount = format_amount(data['amount'])
        await message.answer(
            f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–°—É–º–º–∞: {formatted_amount} —Å—É–º\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–Ω–µ—Ç'}",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞",
            reply_markup=get_main_keyboard()
        )
    
    await state.clear()